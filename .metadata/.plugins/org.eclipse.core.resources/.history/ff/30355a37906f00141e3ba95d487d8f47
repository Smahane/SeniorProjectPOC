package com.seniorproject.myassistant;

import java.util.List;

import android.app.Activity;
import android.content.Context;
import android.location.Address;
import android.location.Criteria;
import android.location.Geocoder;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.widget.TextView;
import android.widget.Toast;

public class ShowLocationActivity extends Activity implements LocationListener {
  private TextView latituteField;
  private TextView longitudeField;
  int m_lattitude;
  int m_longitude;
  
  private LocationManager locationManager;
  private String provider;
  
  
/** Called when the activity is first created. */

  @Override
  public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_show_location);
    latituteField = (TextView) findViewById(R.id.TextView02);
    longitudeField = (TextView) findViewById(R.id.TextView04);

    // Get the location manager
    locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
    // Define the criteria how to select the location provider -> use
    // default
    Criteria criteria = new Criteria();
    provider = locationManager.getBestProvider(criteria, false);
   // Location location = locationManager.getLastKnownLocation(provider);
    
    Location location = getLastKnownLocation();
  

    // Initialize the location fields
    if (location != null) {
      System.out.println("Provider " + provider + " has been selected.");
      onLocationChanged(location);
    } else {
      latituteField.setText("Location not available");
      longitudeField.setText("Location not available");
    }
  }

  
  private Location getLastKnownLocation() {
	  locationManager = (LocationManager)getApplicationContext().getSystemService(LOCATION_SERVICE);
    List<String> providers = locationManager.getProviders(true);
    Location bestLocation = null;
    for (String provider : providers) {
        Location l = locationManager.getLastKnownLocation(provider);
        if (l == null) {
            continue;
        }
        if (bestLocation == null || l.getAccuracy() < bestLocation.getAccuracy()) {
            // Found best last known location: %s", l);
            bestLocation = l;
        }
    }
    return bestLocation;
}
  
  public List<Address> getAddress() {
      try {
          Geocoder geocoder;
          List<Address> addresses;
          geocoder = new Geocoder(context);
          if (latitude != 0 || longitude != 0) {
              addresses = geocoder.getFromLocation(latitude ,
                      longitude, 1);
                      String address = addresses.get(0).getAddressLine(0);
          String city = addresses.get(0).getAddressLine(1);
          String country = addresses.get(0).getAddressLine(2);
                      Log.d("TAG", "address = "+address+", city ="+city+", country = "+country );
          return addresses;
          } else {
              Toast.makeText(context, "latitude and longitude are null",
                      Toast.LENGTH_LONG).show();
              return null;
          }
      } catch (Exception e) {
          e.printStackTrace();
          return null;
      }
  }

/* Request updates at startup */
  @Override
  protected void onResume() {
    super.onResume();
    locationManager.requestLocationUpdates(provider, 400, 1, this);
  }

  /* Remove the locationlistener updates when Activity is paused */
  @Override
  protected void onPause() {
    super.onPause();
    locationManager.removeUpdates(this);
  }

  @Override
  public void onLocationChanged(Location location) {
    m_lattitude = (int) (location.getLatitude());
    m_longitude = (int) (location.getLongitude());
    latituteField.setText(String.valueOf(lattitude));
    longitudeField.setText(String.valueOf(longitude));
  }

  @Override
  public void onStatusChanged(String provider, int status, Bundle extras) {
    // TODO Auto-generated method stub

  }

  @Override
  public void onProviderEnabled(String provider) {
    Toast.makeText(this, "Enabled new provider " + provider,
        Toast.LENGTH_SHORT).show();

  }

  @Override
  public void onProviderDisabled(String provider) {
    Toast.makeText(this, "Disabled provider " + provider,
        Toast.LENGTH_SHORT).show();
  }
} 